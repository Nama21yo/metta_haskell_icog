(= (range $start $end $inc)
   (if (>= $start $end)
       ()  ;; stop when we've reached/exceeded end
       (let $nextEl  (range (+ $start $inc) $end $inc)
            (cons-atom $start $nextEl)
       )
   )
)
(= (getCols $matrix) 
   (if (> (size-atom $matrix) 0)
        (let $firstRow (car-atom $matrix) 
            
                    (size-atom $firstRow)
        )
    ;  (size-atom (car-atom $matrix))
     0))
(= (getElement $matrix $row $col)
    (let $lenRow (index-atom $matrix $row)  
        (index-atom $lenRow $col)
    )
;    (index-atom (index-atom $matrix $row) $col)
   )
;; Extract upper triangular matrix (elements where j >= i)
; (: upperTriangular (-> $a $a))
(= (upperTriangular $matrix)
   (let* (($numRows (size-atom $matrix))
          ($numCols (getCols $matrix))
         ;   (() (println! (length $numRows $numCols))) 
          ($rowIndexes (range 0 $numRows 1))
          ($colIndexes (range 0 $numCols 1))
         ;   (() (println! (indexes $rowIndexes $colIndexes))) 
          ($i (superpose  $rowIndexes))
          ($j (superpose  $colIndexes))
          )
     (if (>= $j $i)
       (getElement $matrix $i $j)
       (empty))))
; !(collapse (upperTriangular ((1 2 3) (4 5 6) (7 8 9))))

; (: range (-> Number Number Number Expression))

; !(range 1 10 2)


;; Extract lower triangular matrix (elements where j <= i)  
; (: lowerTriangular (-> $a $a))
(= (lowerTriangular $matrix)
   (let* (($numRows (size-atom $matrix))
          ($numCols (getCols $matrix))
           ($rowIndexes (range 0 $numRows 1))
          ($colIndexes (range 0 $numCols 1))
          ($i (superpose  $rowIndexes))
          ($j (superpose  $colIndexes))
      ;   (() (println! (indexes $i $j)))     
     )
     (if (<= $j $i)
       (getElement $matrix $i $j)
       0)))
; !(collapse (lowerTriangular ((1 2 3) (4 5 6) (7 8 9))))

;; Build triangular matrix maintaining structure
; (: buildUpperTriangular (-> $a $a))
(= (buildUpperTriangular $matrix)
   (let* (($numRows (size-atom $matrix))
            ($rowIndexes (range 0 $numRows 1))
          ($rowIndex (superpose  $rowIndexes))
                ;   (() (println! (indexes $rowIndex)))     

          )
     (collapse (buildUpperTriangularRow $matrix $rowIndex))))

; (: buildUpperTriangularRow (-> $a Nat $a))
(= (buildUpperTriangularRow $matrix $rowIndex)
   (let* (($row (index-atom $matrix $rowIndex))
            ; (() (println! (row $rowIndex)))    
          ($numCols (size-atom $row))
          ($colIndexes (range 0 $numCols 1))
          ($colIndex (superpose  $colIndexes))

          )
     (if (>= $colIndex $rowIndex)
       (index-atom $row $colIndex)
       0)))

; (: buildLowerTriangular (-> $a $a))
(= (buildLowerTriangular $matrix)
   (let* (($numRows (size-atom $matrix))
            ($rowIndexes (range 0 $numRows 1))
          ($rowIndex (superpose $rowIndexes)))
     (collapse (buildLowerTriangularRow $matrix $rowIndex))))

; (: buildLowerTriangularRow (-> $a Nat $a))
(= (buildLowerTriangularRow $matrix $rowIndex)
   (let* (($row (index-atom $matrix $rowIndex))
          ($numCols (size-atom $row))
          ($colIndexes (range 0 $numCols 1))
          ($colIndex (superpose $colIndexes))
          )
     (if (<= $colIndex $rowIndex)
       (index-atom $row $colIndex)
       0)))
;; Example matrix: ((1 2 3) (4 5 6) (7 8 9))

;; Upper triangular extraction
!(collapse (buildUpperTriangular ((1 2 3 4 5) (4 5 6 7 8 ) (7 8 9 10 11) (12 13 14 15 16) (17 18 17 17 17))))
;; Expected: ((1 2 3) (0 5 6) (0 0 9))

;; Lower triangular extraction  
!(collapse (buildLowerTriangular ((1 2 3 4 5) (4 5 6 7 8 ) (7 8 9 10 11) (12 13 14 15 16) (17 18 17 17 17))))
;; Expected: ((1 0 0) (4 5 0) (7 8 9))

;; Identity matrix triangular
;; !(collapse (buildUpperTriangular ((1 0 0) (0 1 0) (0 0 1))))
;; Expected: ((1 0 0) (0 1 0) (0 0 1))
